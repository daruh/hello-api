name: CI Checks

on: [push]

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.19
      - name: Check out code into Go module directory
        uses: actions/checkout@v2
      - name: Run Test
        run: make test
      - name: Coverage Test
        run: make coverage
      - name: Generate Report
        run: make report
      - name: Copy Files
        run: |
          mkdir reports
          cp cover.html reports/.
      - name: Archive
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: reports
  build:
    name: Build App
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.19

      - name: Check out code into Go module directory
        uses: actions/checkout@v2

      - name: Build
        run: make build

      - name: Copy Files
        run: |
              mkdir artifacts
              cp api artifacts/.

      - name: Archive
        uses: actions/upload-artifact@v2
        with:
            name: api
            path: artifacts
  deliver:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name:  Checkout code
      uses: actions/checkout@v2
    - name: Download binary
      uses: actions/download-artifact@v2
      with:
        name: api
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body:  |
           Still in experiment phase
        draft: true
        prerelease: true
    - name: Upload Release Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN:
          ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: api
        asset_name: api
        asset_content_type: application/octet-stream
  containerize:
    name: Build Containers
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Build and push Docker image
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.ref }}
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}